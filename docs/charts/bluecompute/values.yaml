# Declare variables to be passed into your templates.

auth:
  enabled: true
  replicaCount: 1
  image:
    repository: ibmcase/auth-mp
    tag: v3.0.0
    pullPolicy: IfNotPresent
  service:
    name: auth
    type: NodePort
    servicePort: 9080
    servicePortHttps: 9443
  resources:
    requests:
      cpu: 200m
      memory: 300Mi

catalog:
  enabled: true
  replicaCount: 1
  image:
    repository: ibmcase/catalog-mp
    tag: v3.0.0
    pullPolicy: IfNotPresent
  service:
    type: NodePort
    servicePort: 9080
    servicePortHttps: 9443
    zipkinPort: 9411
    zipkinName: zipkin
  resources:
    requests:
      cpu: 200m
      memory: 300Mi

ibmcase-elasticsearch:
  enabled: true
  replicaCount: 1
  image: 
    repository: quay.io/pires/docker-elasticsearch-kubernetes
    pullPolicy: IfNotPresent
    tag: 1.7.1-4
  clustername: default-cluster
  service:
    name: catalog-elasticsearch
  labels:
    datastore: elasticsearch
  resources:
    limits:
      memory: 700Mi
    requests:
      memory: 350Mi
  secretName: binding-refarch-compose-for-elasticsearch

customer:
  enabled: true
  replicaCount: 1
  image:
    repository: ibmcase/customer-mp
    tag: v4.0.0
    pullPolicy: IfNotPresent
    resources:
      requests:
        cpu: 200m
        memory: 300Mi
  service:
    name: customer
    cloudantservicename: cloudant-service
    type: NodePort
    servicePort: 9080
    servicePortHttps: 9443
    auth: auth
    zipkinHost: zipkin
    zipkinPort: 9411
  jwt:
    id: myMpJwt
  cloudant:
    user: admin
    password: pass
    protocol: http
    host: localhost
    type: NodePort
    port: 80
    nodeport: 31222
    database: customers
    #image: registry.csplab.cloudns.cx/microprofile/populate
    image: ibmcase/populate
    #image: populate
  persistence:
    enabled: false
    accessMode: ReadWriteOnce

inventory:
  enabled: true
  replicaCount: 1
  image:
    repository: ibmcase/inventory-mp
    tag: v2.0.0
    pullPolicy: IfNotPresent
    resources:
      requests:
        cpu: 200m
        memory: 300Mi
  service:
    name: inventory
    type: NodePort
    servicePort: 9080
    servicePortHttps: 9443
    sqlport: 3306
    dbname: inventorydb
    rabbitmq: rabbitmq
    zipkinPort: 9411
    zipkinName: zipkin

inventorydb:
  image: "ibmcase/bc-inventorydb"
  imageTag: "v2.0.0"
  imagePullPolicy: Always
  livenessProbe:
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    successThreshold: 1
    failureThreshold: 3
  readinessProbe:
    initialDelaySeconds: 5
    periodSeconds: 10
    timeoutSeconds: 1
    successThreshold: 1
    failureThreshold: 3
  persistence:
    enabled: false
    accessMode: ReadWriteOnce
    size: 8Gi
  resources:
    requests:
      memory: 256Mi
      cpu: 100m
  service:
    name: inventorydb
    type: ClusterIP
    port: 3306
  mysqlRootPassword: password
  mysqlPassword: password

orders:
  enabled: true
  replicaCount: 1
  image:
    repository: ibmcase/orders-mp
    tag: v4.0.0
    resources:
      requests:
        cpu: 200m
        memory: 300Mi
  service:
    name: orders
    type: NodePort
    servicePort: 9080
    servicePortHttps: 9443
    rabbitmq: rabbitmq
    ordersdb: ordersdb
    inventory: inventory
    auth: auth
    zipkinHost: zipkin
    zipkinPort: 9411
  sql:
    user: root
    password: password
    port: 3306
  jwt:
    id: myMpJwt
  rabbitmq:
    mainPort: 5672
    managePort: 15672

ordersdb:
  image: "ibmcase/bc-ordersdb"
  imageTag: "v2.0.0"
  imagePullPolicy: Always
  livenessProbe:
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    successThreshold: 1
    failureThreshold: 3
  readinessProbe:
    initialDelaySeconds: 5
    periodSeconds: 10
    timeoutSeconds: 1
    successThreshold: 1
    failureThreshold: 3
  persistence:
    enabled: false
    accessMode: ReadWriteOnce
    size: 8Gi
  resources:
    requests:
      memory: 256Mi
      cpu: 100m
  service:
    type: ClusterIP
    port: 3306
    servicename: ordersdb
  mysqlRootPassword: password
  mysqlPassword: password

web:
  enabled: true
  replicaCount: 1
  image:
    repository: ibmcase/bc-web-mp
    tag: v2.0.0
    pullPolicy: IfNotPresent
  service:
    name: bluecompute-web
    type: NodePort
    externalPort: 80
    internalPort: 8000
    nodeport:
      port:
  ingress:
    hostname:
    path: /bluecompute-mp
  resources:
    limits:
      cpu: 100m
      memory: 128Mi
    requests:
      cpu: 100m
      memory: 128Mi
  region:
  clusterName:
  services:
    auth:
      host:
      port:
    catalog:
      host:
      port:
    customer:
      host:
      port:
    orders:
      host:
      port:
    reviews:
      host:
      port:
  global:
    bluemix:
      apiKey:
      target:
        endpoint:
        org:
        space:
      clusterName:

ibm-icpmonitoring:
  mode: standard
  tls:
    enabled: false
  imagePullPolicy: Always
  prometheus:
    image:
      repository: ibmcom/prometheus
      tag: v2.0.0
    port: 9090
    scrapeInterval: 1m
    evaluationInterval: 1m
    retention: 24h
    args: {}
    persistentVolume:
      enabled: false
      size: 10Gi
      storageClass: "-"
    resources:
      limits:
        cpu: 500m
        memory: 512Mi
      requests:
        cpu: 100m
        memory: 128Mi
    alertRuleFiles: alertRules
    configFiles: prometheusConfig
    ## if true, will create rbac role and related rolebinding for k8s resource access
    ##
    rbacRoleCreation: true
    ingress:
      enabled: false
      annotations: {}
    service:
      type: NodePort
    etcdTarget:
      enabled: false
      etcdAddress: ["127.0.0.1"]
      etcdPort: "4001"
      secret: etcd-secret
      tlsConfig: {}
  alertmanager:
    image:
      repository: ibmcom/alertmanager
      tag: v0.13.0
    port: 9093
    persistentVolume:
      enabled: false
      size: 1Gi
      storageClass: "-"
    resources:
      limits:
        cpu: 200m
        memory: 256Mi
      requests:
        cpu: 10m
        memory: 64Mi
    configFiles: alermanagerConfig
    ingress:
      enabled: false
      annotations: {}
    service:
      type: NodePort
  kubeStateMetrics:
    enabled: false
    image:
      repository: ibmcom/kube-state-metrics
      tag: v1.2.0
    port: 80
  nodeExporter:
    enabled: false
    image:
      repository: ibmcom/node-exporter
      tag: v0.15.2
    port: 9100
  grafana:
    image:
      repository: "ibmcom/grafana"
      tag: "4.6.3"
    port: 3000
    user: "admin"
    password: "admin"
    persistentVolume:
      enabled: false
      size: 1Gi
      storageClass: "-"
    resources:
      limits:
        cpu: 500m
        memory: 512Mi
      requests:
        cpu: 100m
        memory: 128Mi
    configFiles: grafanaConfig
    ingress:
      enabled: false
      annotations: {}
    service:
      type: NodePort
    elasticsearchDash:
      enabled: false
  collectdExporter:
    enabled: false
    image:
      repository: ibmcom/collectd-exporter
      tag: 0.3.1
    service:
      serviceMetricsPort: 9103
      serviceCollectorPort: 25826
  configmapReload:
    image:
      repository: ibmcom/configmap-reload
      tag: v0.1
  router:
    image:
      repository: ibmcom/icp-router
      tag: 2.2.0
    subjectAlt: 127.0.0.1
  elasticsearchExporter:
    enabled: false
    image:
      repository: ibmcom/elasticsearch-exporter
      tag: 1.0.2
    esUri: http://elasticsearch:9200
    port: 9108
  curl:
    image:
      repository: ibmcom/curl
      tag: 3.6
  certGen:
    image:
      repository: ibmcom/icp-cert-gen
      tag: 1.0.0
